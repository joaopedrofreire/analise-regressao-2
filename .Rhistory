mean(c(0.0039,0.0017,0.0038))
s_repe=0.00313/1.128
s_repe
s_repe^2
sqrt((0.00975/1.128)^2-(0.00277)^2/20)
dados = read.csv("carprice.csv")
pairs(dados, price + wheelbase)
pairs(~ price + wheelbase + carlength + carwidth + carheight + curbweight + enginesize + boreratio + stroke + compressionratio + horsepower + peakrpm + citympg, data = dados)
cor(dados)
dado[,sapply(dados, is.numeric)]
dados[,sapply(dados, is.numeric)]
dados_numeric = dados[,sapply(dados, is.numeric)]
pairs(dados_numeric)
cor(dados_numeric)
install.packages("corrplot")
rquery.cormat(dados_numeric)
corrplot(dados_numeric.cor)
library(corrplot)
corrplot(dados_numeric.cor)
install.packages("corrplot")
install.packages("corrplot")
library(ggcorrplot)
install.packages(ggcorrplot)
install.packages(ggplot)
install.packages(ggplot2)
cor(dados_numeric)
dim(dados_numeric)
is.na(train)
colSums(is.na(train))
gg_miss_var(train[,colSums(is.na(train)) > 0])
library(ggplot2)
library(naniar)
library(corrplot)
library(gridExtra)
library(cowplot)
library(reshape2)
install.packages(ggplot2)
install.packages(naniar)
install.packages(corrplot)
install.packages(gridExtra)
install.packages(cowplot)
install.packages(reshape2)
pairs(price ~ wheelbase + carlength + carwidth + carheight + curbweight + enginesize + boreratio + stroke + compressionratio + horsepower + peakrpm + citympg, data = dados)
install.packages(ggplot2)
install.packages(naniar)
install.packages(corrplot)
install.packages(gridExtra)
install.packages(cowplot)
install.packages(reshape2
dados = read.csv("carprice.csv")
pairs(dados, price + wheelbase)
pairs(price ~ wheelbase + carlength + carwidth + carheight + curbweight + enginesize + boreratio + stroke + compressionratio + horsepower + peakrpm + citympg, data = dados)
cor(dados)
dados_numeric = dados[,sapply(dados, is.numeric)]
pairs(dados_numeric)
cor(dados_numeric)
dim(dados_numeric)
is.na(dados_n)
is.na(dados_numeric)
colSums(is.na(train))
colSums(is.na(dados_numeric))
install.packages(ggplot2)
install.package(ggplot2)
install.packages(ggplot2)
library(ggplot2)
(13.25-9.25)/2
(13.25+9.25)/2
(13.15+9.15)/2
(0.1125)^(1/12)
(1.1125)^(1/12)
11.15*1.1
(1.12265)^(1/12)
(1.092)^(1/12)
(1.098)^(1/12)
dados = read.csv("carprice.csv")
load("C:/Users/laura/analise-regressao-2/.RData")
install.packages(ggplot2)
install.packages(naniar)
install.packages(corrplot)
install.packages(gridExtra)
install.packages(cowplot)
install.packages(reshape2)
dados = read.csv("carprice.csv")
pairs(dados, price + wheelbase)
dados
pairs(dados, price + wheelbase)
pairs(dados, price ~ wheelbase)
plot() wheelbase)
plot(price~wheelbase)
plot(price~wheelbase, data=dados)
dados
pairs(dados, price + wheelbase)
pairs(price ~ wheelbase + carlength + carwidth + carheight + curbweight + enginesize + boreratio + stroke + compressionratio + horsepower + peakrpm + citympg, data = dados)
cor(dados)
cor(dados)
dados_numeric = dados[,sapply(dados, is.numeric)]
View(dados_numeric)
View(dados)
pairs(dados_numeric)
cor(dados_numeric)
cor(dados_numeric)
is.na(dados_numeric)
colSums(is.na(dados_numeric))
# Verificação de violações das suposições básicas do MRLS
# Alguns exemplos com n=30 observações
n=30
#################################################################################################################################
###### EXEMPLO 1: Violação da suposição de função de regressão linear em x: de fato tem-se uma função de regressão quadrática em x
#################################################################################################################################
# Fixando a semente de geração de números aleatórios. Essa inicialização da semente é importante, para poder reproduzir os dados
set.seed(123125473)
# gerando as covariáveis x: normal média 8 desvio padrão 2, a escolha foi arbitrária
x=rnorm(n,8,2)
# fixando uma função resposta quadrática em x
mu=matrix(0,n)
y=matrix(0,n)
for (i in 1:n) mu[i]=2+0.5*x[i]+x[i]^2 # calculou a média mu_i=2+x/2
# gerando os valores de y com variância 4
for (i in 1:n) y[i]=rnorm(1,mu[i],2)
# ajsuta o MRLS
ajuste_1=lm(y~x)
summary(ajuste_1)
sqres=sum((y-ajuste_1$fitted)^2) # calcula a soma de quadrados dos resíduos
qmres=sqres/(n-2) # calcula o s^2
residuo_padronizado=ajuste_1$residuals/sqrt(qmres) # calcula os resíduos padronizados
# Diagrama de dispersão dos dados
plot(x,y,main="Diagrama de dispersão",ylab="resposta",xlab="covariável",sub="Obs: exemplo de situação em que a função de regressão linear em x é violada")
abline(ajuste_1,lty=2,col="red")
# gráficos dos resíduos
win.graph()
plot(ajuste_1$fitted,residuo_padronizado,main="Resíduos padronizados versus Valores ajustados", sub="Obs: exemplo de situação em que a função de regressão linear em x é violada",xlab="valores ajustados",ylab="Resíduos padronizados",ylim=c(-2.5,2.5))
abline(h=0,lty=2)
win.graph()
dados<-read.csv2("advertising.csv",sep=";",dec=".")
dados$vendas
dados$TV
pairs(dados)
modelo<-lm(dados$vendas~dados$TV+dados$radio+dados$jornal)
summary(modelo)
summary(modelo)
dados$vendas
dados$TV
pairs(dados)
modelo<-lm(dados$vendas~dados$TV+dados$radio+dados$jornal)
summary(modelo)
cor(dados)
summary(modelo)
anova(modelo)
modeloTV<-lm(dados$vendas~dados$TV)
modelojornal<-lm(dados$vendas~dados$jornal)
modeloradio<-lm(dados$vendas~dados$radio)
anova(modeloTV)
anova(modeloradio)
anova(modelojornal)
dados$TV_pad<-(dados$TV-mean(dados$TV))/sqrt(var(dados$TV))
dados$radio_pad<-(dados$radio-mean(dados$radio))/sqrt(var(dados$radio))
dados$jornal_pad<-(dados$jornal-mean(dados$jornal))/sqrt(var(dados$jornal))
dados$vendas_pad<-(dados$vendas-mean(dados$vendas))/sqrt(var(dados$vendas))
modelo_pad<-lm(dados$vendas_pad~dados$TV_pad+dados$radio_pad+dados$jornal_pad-1)
summary(modelo_pad)
anova(modelo_pad)
dados = read.csv("carprice.csv")
pairs(dados, price + wheelbase)
pairs(price ~ wheelbase + carlength + carwidth + carheight + curbweight + enginesize + boreratio + stroke + compressionratio + horsepower + peakrpm + citympg, data = dados)
cor(dados)
dados_numeric = dados[,sapply(dados, is.numeric)]
pairs(dados_numeric)
cor(dados_numeric)
cor(dados_numeric)
plot(price~carheight, data=dados)
plot(price~carheight, data=dados)
pairs(price~carheight+stroke+compressionratio+peakrpm, data=dados)
gg_miss_var(train[,colSums(is.na(train)) > 0])
dim(dados_numeric)
library(caret)
install.packages(caret)
install.packages("caret")
library(caret)
dados
dados
?tslm
pairs(dados_numeric)# gráficos pares
lm(price~, data=dados_numeric)
lm(price~ , data=dados_numeric)
lm(price~. , data=dados_numeric)
modelo = lm(price~. , data=dados_numeric)
anova(modelo)
dados<-read.csv2("advertising.csv",sep=";",dec=".")
dados$vendas
dados$TV
pairs(dados)
modelo<-lm(dados$vendas~dados$TV+dados$radio+dados$jornal)
summary(modelo)
anova(modelo)
modelo = lm(price~. , data=dados_numeric)
anova(modelo)
dados_numeric
anova(modelo)
sqrt(9258483)
summary(modelo)
modelo
predict(modelo)
View(dados_numeric)
dados2 = dados[c(wheelbase)]
dados2 = dados[cwheelbase)]
dados2 = dados[wheelbase]
dados2 = dados$wheelbase
dados2 = dados$wheelbase$carlength
dados2
dados2 = dados$wheelbase+dados$carlength
dados2
dados
dados
dados = read.csv("carprice.csv")
dados
install.packages("fastDummies")
install.packages("fastDummies")
results <- fastDummies::dummy_cols(dados)
install.packages("fastDummies")
dados = read.csv("carprice.csv")
View(dados)
dados = read.csv("carprice.csv")
View(dados)
dados = read.csv("carprice.csv")
pairs(dados)
pairs(preco~porta+combustivel, data=dados)
View(dados)
pairs(preco~portas+combustivel, data=dados)
modelo = lm(preco~.,data=dados)
modelo = lm(preco~.,data=dados)
modelo = lm(preco~portas,data=dados)
dtypes(dados)
types(dados)
type(dados)
dtype(dados)
modelo = lm(preco~largura,data=dados)
is.numeric(dados)
as.numeric(dados)
View(dados)
View(modelo)
View(modelo)
modelo = lm(preco~largura,data=dados)
modelo
View(dados)
dados = read.csv("carprice.csv")
dados = read.csv("carprice.csv")
View(dados)
modelo = lm(preco~largura,data=dados)
modelo
modelo = lm(preco~.,data=dados)
modelo
anova(modelo)
dados = read.csv("carprice.csv")
dados
pairs(preco~portas+combustivel, data=dados)
modelo = lm(preco~largura,data=dados)
pairs(preco~., data=dados)
modelo = lm(preco~.,data=dados)
modelo
cor(dados)
modelo2 = lm(preco~comprimento+largura+cavalos)
modelo2 = lm(preco~comprimento+largura+cavalos, data=dados)
modelo2
anova(modelo)
anova(modelo2)
dados
modelo
summary(modelo)
modelo2 = lm (preco~combustivel+largura+cavalos)
modelo2 = lm (preco~combustivel+largura+cavalos, data=dados)
summary(modelo2)
pairs(dados)
?step
?step
step(lm,dados)
